Generate a Streamlit app code for an AI chatbot. 
The UI should include a simple text entry field where users can type their queries, and the chatbot should display responses accordingly. 
The code should be generated based on the following user specifications (provided in JSON format) and should only use file metadata, not the full file content. 
Include necessary comments to explain the code logic.

# Create the model instance using Gemini Flash, including a detailed system instruction that aligns with the user specifications.
    model = genai.GenerativeModel(
        model_name="gemini-2.0-flash",
        generation_config=generation_config,
        system_instruction=system_instruction,
    )

    Initialize the chat session
    chat_session = model.start_chat()

 - Get the API Key from the .env file and configure the Gemini API key."
    # Load environment variables from a .env file
    load_dotenv()
    # The GEMINI_API_KEY should be defined in your .env file.
    api_key = os.getenv("GEMINI_API_KEY")"""
    try:
        response = chat_session.send_message(message)
        return response.text
    except Exception as e:
        return f"# Error calling Gemini Flash API: {e}

Always use gemini-2.0-flash model for the chatbot.

// IGNORE: this is for MVP1 Audit chatbot:

The finalized chatbot should have file uploading built in the streamlit. 
The file should be an audit from the user as their degree.
Here is the code to copy:

uploaded_file = st.file_uploader("Upload your audit:", type=["pdf", "txt"])

Then convert this audit to text.
The text conversion should be from the package import line:

from pypdf import pdfreader.

Then, keep the audit message in the chat session combined with any user requests but don't show it being added to the chat.

send it to gemini as a message. chat_session.send_message(audit_text)

This way, Gemini is updated on the user's audit after submission and can help the user with
their audit more effeciently.

When storing the audit as text, make sure to follow Gemini's chat history format:
{"role": "user", "content": [{"text": "PDF text goes here"}]}

The first message in the state from:
if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "assistant", "content": "<content here>"}]

The content for the opening message should be pulled from the user specification in the dict below.
An example could be: Hi ___, I can't wait to help you with your degree as your ___.
But obviously make it flow better. 

GIVE JUST THE CODE AND NOTHING ELSE.